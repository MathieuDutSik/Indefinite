#!/usr/bin/perl -w

sub TransformString($)
{
    my ($strin) = @_;
    @ULR=split("", $strin);
    $idxNZ=-1;
    $strWorkI="";
    for ($idx=1; $idx<=scalar(@ULR); $idx++)
    {
	$eChar=$ULR[$idx-1];
	if ($idxNZ eq -1 && $eChar ne " ")
	{
	    $idxNZ=$idx;
	}
	if ($idxNZ ne -1)
	{
	    $strWorkI=$strWorkI.$eChar;
	}
    }
    @SSP=split("", $strWorkI);
#    print "    INSIDE strWorkI=".$strWorkI." |SSP|=".scalar(@SSP)."\n";
    $strReturn="";
    for ($ipos=1; $ipos<=scalar(@SSP); $ipos++)
    {
	$ChR=$SSP[$ipos-1];
#	print "             ipos=".$ipos."   chR=".$chR."\n";
	if ($ChR eq "(")
	{
	    $ChainR="";
	}
	else
	{
	    if ($ChR eq ")")
	    {
#		print " INSIDE chainR=".$chainR."\n";
		@FLE=split(" ", $ChainR);
		$strReturn=$strReturn."(";
		for ($iV=1; $iV<=scalar(@FLE); $iV++)
		{
		    $val=$FLE[$iV-1];
		    $val++;
		    $strReturn=$strReturn.$val;
		    if ($iV<scalar(@FLE))
		    {
			$strReturn=$strReturn.",";
		    }
		}
		$strReturn=$strReturn.")";
	    }
	    else
	    {
		$ChainR=$ChainR.$ChR;
#		print " LOOP chainR=".$chainR."\n";
	    }
	}
    }
#    print "strReturn=".$strReturn."\n";
    return $strReturn;
}

print "local GRP;\n";
print "GRP:=Group([\n";
$strGroup="";
$HaveGroupElt=0;
$IsFirstGroupElt=1;
$nbGen=0;
sub FlushGenerator()
{
    if ($HaveGroupElt eq 1)
    {
#	print "   WRITE strGroup=".$strGroup."\n";
	if ($IsFirstGroupElt eq 0)
	{
	    print ",\n";
	}
	$IsFirstGroupElt=0;
	$strWork=TransformString($strGroup);
#	print "   REWRITE strWork=".$strWork."\n";
	print $strWork;
	$strGroup="";
	$HaveGroupElt=0;
	$nbGen=$nbGen+1;
    }
}



while(<STDIN>)
{
    s/\n//;
    $eLine=$_;
    @SSP=split("", $eLine);
    $eFC=$SSP[0];
    if ($eFC ne "l" && $eFC ne "[" && $eFC ne "1" && $eFC ne "2" && $eFC ne "3" && $eFC ne "4" && $eFC ne "5" && $eFC ne "6" && $eFC ne "7" && $eFC ne "8" && $eFC ne "9")
    {
	$IsGroupElt=1;
    }
    else
    {
	$IsGroupElt=0;
    }
#    print "IsGrpElt=".$IsGroupElt." eLine=".$eLine."\n";
    if ($IsGroupElt eq 1)
    {
	if ($eFC eq " ")
	{
	    $strGroup=$strGroup.$eLine; 
	}
	if ($eFC eq "(")
	{
#	    print "   strGroup=".$strGroup."\n";
	    FlushGenerator();
	    $strGroup=$eLine;
	    $HaveGroupElt=1;
	}
    }
    if ($IsGroupElt eq 0)
    {
#	print "   strGroup=".$strGroup."\n";
	FlushGenerator();
    }
    @U=split("orbit", $eLine);
    if (scalar(@U) eq 2)
    {
	$prevLastLine=$eLine;
    }
}
if ($nbGen eq 0)
{
    if ($IsFirstGroupElt eq 0)
    {
	print ",";
    }
    $IsFirstGroupElt=0;
    print "()";
}
print "]);\n";
@USL=split(";", $prevLastLine);
@USL2=split("=", $USL[1]);
$grpsize=$USL2[1];
@USL3=split(" ", $USL[2]);
$nbGenRead=$USL3[0];
if ($nbGen ne $nbGenRead)
{
    print "nbGen=".$nbGen."  nbGenRead=".$nbGenRead."\n";
    print "prevLastLine=".$prevLastLine;
    print "We have inconsistency in number of generators\n";
}
# if the group size is in floating point, we cannot use it in GAP
# unfortunately
@SPLT=split("e", $grpsize);
if (scalar(@SPLT) eq 1)
{
    print "SetSize(GRP,".$grpsize.");\n";
}
print "return GRP;\n";

